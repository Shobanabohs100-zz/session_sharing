{"version":3,"sources":["service/CookieService.ts","App.tsx","service/LoginService.ts","index.tsx"],"names":["CookiesService","cookies","this","Cookies","addChangeListener","data","alert","JSON","stringify","name","options","get","value","set","path","remove","getAll","loginService","storage","token","domain","store","storeLoginToken","isLoggedIn","removeLoginToken","App","className","onClick","rootElement","document","getElementById","render"],"mappings":"6MAWqBA,E,WAGnB,aAAe,yBAFPC,aAEM,EACZC,KAAKD,QAAU,IAAIE,IACnBD,KAAKD,QAAQG,mBAAkB,SAACC,GAC9BC,MAAMC,KAAKC,UAAUH,EAAM,KAAM,O,gDAI1BI,EAAcC,GACvB,OAAOR,KAAKD,QAAQU,IAAIF,EAAMC,K,0BAGrBD,EAAcG,EAAeF,GACtCR,KAAKD,QAAQY,IAAIJ,EAAMG,EAAvB,aAAgCE,KAAM,KAAQJ,M,6BAGlCD,EAAcC,GAC1BR,KAAKD,QAAQc,OAAON,EAApB,aAA4BK,KAAM,KAAQJ,IAC1CR,KAAKc,W,+BAILV,MAAMC,KAAKC,UAAUN,KAAKD,QAAQe,e,KChClCC,EAAe,I,WCUjB,aAAe,yBADfC,aACc,EACZhB,KAAKgB,QAAU,IAAIlB,E,yDAGnB,QAASE,KAAKgB,QAAQP,IARA,gB,sCAURQ,GACdjB,KAAKgB,QAAQL,IAXS,aAWcM,EAAO,CACzCC,OAbS,uB,yCAiBXlB,KAAKgB,QAAQH,OAhBS,aAgBiB,CACrCK,OAlBS,yB,MDHf,SAASC,IACPJ,EAAaK,gBAAgB,WAG/B,SAASX,IACPL,MAAMW,EAAaM,cAGrB,SAASR,IACPE,EAAaO,mBAGA,SAASC,IACtB,OACE,uBAAKC,UAAU,OACb,+CACA,qEACA,0BAAQC,QAASN,GAAjB,SACA,0BAAQM,QAAShB,GAAjB,OACA,0BAAQgB,QAASZ,GAAjB,WEnBN,IAAMa,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,gBAACN,EAAD,MAASG,I","file":"static/js/main.5c1fdf47.chunk.js","sourcesContent":["import Cookies, { CookieGetOptions } from \"universal-cookie\";\r\nimport { CookieSetOptions } from \"universal-cookie/cjs/types\";\r\n\r\nexport interface CookiesServiceInterface {\r\n  get(name: string, options?: CookieGetOptions | undefined): string;\r\n\r\n  set(name: string, value: any, options?: CookieSetOptions): void;\r\n\r\n  remove(name: string, options?: CookieSetOptions): void;\r\n}\r\n\r\nexport default class CookiesService implements CookiesServiceInterface {\r\n  private cookies: Cookies;\r\n\r\n  constructor() {\r\n    this.cookies = new Cookies();\r\n    this.cookies.addChangeListener((data) => {\r\n      alert(JSON.stringify(data, null, 2));\r\n    });\r\n  }\r\n\r\n  public get(name: string, options?: CookieGetOptions | undefined): string {\r\n    return this.cookies.get(name, options);\r\n  }\r\n\r\n  public set(name: string, value: string, options?: CookieSetOptions): void {\r\n    this.cookies.set(name, value, { path: \"/\", ...options });\r\n  }\r\n\r\n  public remove(name: string, options?: CookieSetOptions): void {\r\n    this.cookies.remove(name, { path: \"/\", ...options });\r\n    this.getAll();\r\n  }\r\n\r\n  public getAll(): void {\r\n    alert(JSON.stringify(this.cookies.getAll()));\r\n  }\r\n}\r\n","import * as React from \"react\";\nimport \"./styles.css\";\nimport LoginService from \"./service/LoginService\";\nlet loginService = new LoginService();\n\nfunction store() {\n  loginService.storeLoginToken(\"Shobana\");\n}\n\nfunction get() {\n  alert(loginService.isLoggedIn());\n}\n\nfunction remove() {\n  loginService.removeLoginToken();\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n      <button onClick={store}>Store</button>\n      <button onClick={get}>Get</button>\n      <button onClick={remove}>Remove</button>\n    </div>\n  );\n}\n","import CookiesService, { CookiesServiceInterface } from \"./CookieService\";\r\n\r\ninterface ILoginService {\r\n  isLoggedIn(): boolean;\r\n  storeLoginToken(token: string): void;\r\n  removeLoginToken(): void;\r\n}\r\n\r\nconst DOMAIN = \".neoufitness.com\";\r\nconst TOKEN_COOKIE_NAME = \"testCookie\";\r\n\r\nclass LoginService implements ILoginService {\r\n  storage: CookiesServiceInterface;\r\n  constructor() {\r\n    this.storage = new CookiesService();\r\n  }\r\n  isLoggedIn(): boolean {\r\n    return !!this.storage.get(TOKEN_COOKIE_NAME);\r\n  }\r\n  storeLoginToken(token: string): void {\r\n    this.storage.set(TOKEN_COOKIE_NAME, token, {\r\n      domain: DOMAIN\r\n    });\r\n  }\r\n  removeLoginToken(): void {\r\n    this.storage.remove(TOKEN_COOKIE_NAME, {\r\n      domain: DOMAIN\r\n    });\r\n  }\r\n}\r\n\r\nexport default LoginService;\r\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}